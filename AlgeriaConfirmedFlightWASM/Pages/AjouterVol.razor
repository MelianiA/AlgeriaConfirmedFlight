@page "/addorupdate"
@page "/addorupdate/{IdVol:guid}"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Globalization
@inject IVolConfirmeService volService

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <h4>@Titre un vol</h4>

                <MudSelect T="Compagnie" Label="Compagnie" @bind-Value="@VolConfirmeVM.Compagnie"
                           Required="true" RequiredError="Le champs Compagnie est obligatoire !">
                    @foreach (var selectItem in StaticsElements.CmpsBase)
                    {
                        <MudSelectItem Value="@selectItem">@selectItem.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudDatePicker Orientation="Orientation.Portrait" Label="Dernier jous de confirmation"
                               Required="true" RequiredError="Le champs Dernier jous de confirmation est obligatoire!"
                               Culture="@(new CultureInfo("fr-FR"))" @bind-Date="VolConfirmeVM.DateFin" />

                <MudTextField RequiredError="Le champs Ville de départe est obligatoire!" @bind-Value="VolConfirmeVM.VilleDepart"
                              Required="true" Label="Ville de départe" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>

                <MudTextField @bind-Value="VolConfirmeVM.VilleArrivee" Label="Ville d'arrivée" Variant="Variant.Text"
                              Required="true" RequiredError="Le champs Ville d'arrivée est obligatoire!" Margin="Margin.Normal"></MudTextField>

                <MudTextField @bind-Value="VolConfirmeVM.JourDeVol" Label="Jours de Vols" Variant="Variant.Text"
                              Required="true" RequiredError="Le champs Jours de Vols est obligatoire!" Margin="Margin.Normal"></MudTextField>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Class="ml-1" Variant="Variant.Filled" Color="Color.Success"
                       @onclick="Valider">Valider</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@(() => NavigationManager.NavigateTo("index"))">Annuler</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>




@code {
    private VolConfirmeViewModel VolConfirmeVM { get; set; }
    [Parameter] public Guid IdVol { get; set; }
    public string Titre { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    protected override void OnInitialized()
    {
        if (!StaticsElements.SecretValide())
        {
            snackBar.Add("Vous devez saisir le code secret afin de pouvoir effectuer cette opération", Severity.Error);
            NavigationManager.NavigateTo("addorupdate");
        }
        if (IdVol == default)
        {
            VolConfirmeVM = new VolConfirmeViewModel();
            VolConfirmeVM.DateFin = DateTime.Now;
            Titre = "Ajouter";
        }
        else
        {
            var vol = StaticsElements.VolsBase.SingleOrDefault(x => x.Id == IdVol);
            VolConfirmeVM = new VolConfirmeViewModel
                {
                    Id = IdVol,
                    Compagnie = StaticsElements.CmpsBase.SingleOrDefault(c => c.Id == vol.Compagnie),
                    DateFin = vol.DateFin,
                    JourDeVol = vol.JourDeVol,
                    VilleArrivee = vol.VilleArrivee,
                    VilleDepart = vol.VilleDepart
                };
            Titre = "Modifier";

        }
        base.OnInitialized();
    }

    public void Valider()
    {
        form.Validate();
        if (IdVol == default)
        {
            Ajouter();
        }
        else
        {
            Modifier();
        }

    }

    public async void Ajouter()
    {
        if (success)
        {
            VolComfirme vol = new VolComfirme
                {
                    Compagnie = VolConfirmeVM.Compagnie.Id,
                    DateFin = VolConfirmeVM.DateFin,
                    VilleArrivee = VolConfirmeVM.VilleArrivee,
                    VilleDepart = VolConfirmeVM.VilleDepart,
                    JourDeVol = VolConfirmeVM.JourDeVol
                };

            var res = await volService.AjouterVolConirme(vol);
            var strinResp = res.Content.ReadAsStringAsync();
            try
            {
                VolConfirmeVM.Id = Guid.Parse(strinResp.Result.Replace("\"", ""));
                snackBar.Add("L'ajout du vol est réussi", Severity.Success);
                NavigationManager.NavigateTo("index");
            }
            catch (Exception ex)
            {
                snackBar.Add("Il y a eu un problème! veuillez recommencer svp", Severity.Warning);
            }
        }
    }

    public async void Modifier()
    {
        if (success)
        {
            VolComfirme vol = new VolComfirme
                {
                    Id = IdVol,
                    Compagnie = VolConfirmeVM.Compagnie.Id,
                    DateFin = VolConfirmeVM.DateFin,
                    VilleArrivee = VolConfirmeVM.VilleArrivee,
                    VilleDepart = VolConfirmeVM.VilleDepart,
                    JourDeVol = VolConfirmeVM.JourDeVol
                };
            var res = await volService.ModifierVolConirme(vol);
            var strinResp = res.Content.ReadAsStringAsync();
            try
            {
                VolConfirmeVM.Id = Guid.Parse(strinResp.Result.Replace("\"", ""));
                snackBar.Add("La modification du vol est réussi", Severity.Success);
                NavigationManager.NavigateTo("index");
            }
            catch (Exception ex)
            {
                snackBar.Add("Il y a eu un problème! veuillez recommencer svp", Severity.Warning);
            }
        }
    }



}
