@page "/"


@inject IVolConfirmeService volConfirmeService
@inject HttpClient client

<PageTitle>Index</PageTitle>

<h1>Hello !</h1>

Bienvenu dans notre application.

<MudDataGrid MultiSelection="true" Items="@Elements" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste des vols confirmés</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Chercher" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="VolConfirmeViewModel" Field="Compagnie"> </Column>
        <Column T="VolConfirmeViewModel" Field="VilleDepart" />
        <Column T="VolConfirmeViewModel" Field="VilleArrivee" />
        <Column T="VolConfirmeViewModel" Field="JourDeVol" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="VolConfirmeViewModel" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

@code {
    private List<VolConfirmeViewModel> Elements = new List<VolConfirmeViewModel>();
    private string _searchString;
    private bool _sortNameByLength;
    // custom sort by name length
    //private Func<VolConfirmeViewModel, object> _sortBy => x =>
    //{
    //    if (_sortNameByLength)
    //        return x.Compagnie.Name.Length;
    //    else
    //        return x.Compagnie.Name;
    //};

    // quick filter - filter gobally across multiple columns with the same input
    private Func<VolConfirmeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

    //if (x.Compagnie.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //    return true;

    if ($"{x.VilleDepart} {x.VilleArrivee}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        var volsBase = await volConfirmeService.GetAllVols();
        var cmpsBase = await volConfirmeService.GetAllCompagnies();

        Elements = volsBase.Select(x => new VolConfirmeViewModel
            {
                Id = x.Id,
                Compagnie = cmpsBase.SingleOrDefault(c => c.Id == x.Compagnie).Name,
                DateFin = x.DateFin,
                JourDeVol = x.JourDeVol, 
                VilleArrivee = x.VilleArrivee,
                VilleDepart=x.VilleDepart
            }).ToList();
    }

}

