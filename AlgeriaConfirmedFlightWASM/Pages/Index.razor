@page "/"
@page "/index"
@inject IVolConfirmeService volConfirmeService
@inject NavigationManager NavigationManager
@inject HttpClient client

<PageTitle>Liste des vols</PageTitle>

<h1>les vols confirmés vers l'Algérie</h1>

Bienvenu dans notre application.
<p>Ici vous trouverez des derniers vols confirmés</p>

@if (Elements.Count == 0)
{
    <Loader />
}
else
{
    <MudTable Elevation="25" Items="@Elements" Filter="@_quickFilter" @bind-customer="customer">
        <ToolBarContent>
            @*<div @onclick="AjouterVol" class="btn btn-outline-dark">Ajouter un vol </div>*@
            <MudButton @onclick="AjouterVol" Variant="Variant.Outlined">Ajouter</MudButton>
            <MudSpacer />
            <MudTextField  Class="ml-4" @bind-Value="_searchString" Placeholder="Chercher un vol ..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Compagnie</MudTh>
            <MudTh>Ville de départe</MudTh>
            <MudTh>Ville d'arrivée</MudTh>
            <MudTh>Jours de Vols</MudTh>
            <MudTh>Dernier jous de confirmation</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Compagnie">@context.Compagnie</MudTd>
            <MudTd DataLabel="LastName">@context.VilleDepart</MudTd>
            <MudTd DataLabel="VilleArrivee">@context.VilleArrivee</MudTd>
            <MudTd DataLabel="JourDeVol">@context.JourDeVol</MudTd>
            <MudTd DataLabel="DateFin">@context.DateFin.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="">
                <MudFab Color="Color.Success" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}



@code {
    private VolConfirmeViewModel customer = new VolConfirmeViewModel();
    private List<VolConfirmeViewModel> Elements = new List<VolConfirmeViewModel>();
    public List<VolComfirme> VolsBase { get; set; } = new List<VolComfirme>();
    public List<Compagnie> CmpsBase { get; set; } = new List<Compagnie>();
    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<VolConfirmeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Compagnie.Length;
        else
            return x.Compagnie;
    };

    // quick filter - filter gobally across multiple columns with the same input
    private Func<VolConfirmeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.JourDeVol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Compagnie.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.VilleDepart.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            VolsBase = await volConfirmeService.GetAllVols();
            CmpsBase = await volConfirmeService.GetAllCompagnies();
        }
        catch (Exception ex)
        {

        }

        if (VolsBase.Count() == 0 || CmpsBase.Count() == 0)
        {
            return;
        }
        Elements = VolsBase.Select(x => new VolConfirmeViewModel
            {
                Id = x.Id,
                Compagnie = CmpsBase.SingleOrDefault(c => c.Id == x.Compagnie).Name,
                DateFin = x.DateFin,
                JourDeVol = x.JourDeVol,
                VilleArrivee = x.VilleArrivee,
                VilleDepart = x.VilleDepart
            }).ToList();
                    snackBar.Add("list Saved.", Severity.Error);
    }

    public void AjouterVol()
    {
        NavigationManager.NavigateTo("addorupdate");
    }

}

