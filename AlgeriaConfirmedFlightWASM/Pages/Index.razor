@page "/"
@page "/index"
@inject IVolConfirmeService volConfirmeService
@inject NavigationManager NavigationManager
@inject HttpClient client

<PageTitle>Liste des vols</PageTitle>

<h1>Hello !</h1>

Bienvenu dans notre application.
<p>Ici vous trouverez des derniers vols confirmés</p>

@if (Elements.Count == 0)
{
    <Loader />
}
else
{
    <MudDataGrid MultiSelection="true" Items="@Elements" Sortable="true"
             Filterable="true" QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Liste des vols confirmés</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Chercher"
                      Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="VolConfirmeViewModel" Field="Compagnie" Filterable="true" Title="Compagnie"/>
            <Column T="VolConfirmeViewModel" Field="VilleDepart" Filterable="true" Title="Ville de départ"/>
            <Column T="VolConfirmeViewModel" Field="VilleArrivee" Filterable="true" Title="Ville d'arrivée"/>
            <Column T="VolConfirmeViewModel" Field="JourDeVol" Filterable="true" Title="Jours de Vols"/>
            <Column T="VolConfirmeViewModel" Field="DateFin" Title="Dernier jous de confirmation" Filterable="true"  />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="VolConfirmeViewModel" />
        </PagerContent>
    </MudDataGrid>

    <br/>
    <div @onclick="AjouterVol" class="btn btn-dark">Ajouter un vol </div>
}



@code {
    private List<VolConfirmeViewModel> Elements = new List<VolConfirmeViewModel>();
    public List<VolComfirme> VolsBase { get; set; } = new List<VolComfirme>();
    public List<Compagnie> CmpsBase { get; set; } = new List<Compagnie>();
    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<VolConfirmeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Compagnie.Length;
        else
            return x.Compagnie;
    };

    // quick filter - filter gobally across multiple columns with the same input
    private Func<VolConfirmeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.JourDeVol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Compagnie.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.VilleDepart.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            VolsBase = await volConfirmeService.GetAllVols();
            CmpsBase = await volConfirmeService.GetAllCompagnies();
        }
        catch (Exception ex)
        {

        }

        if (VolsBase.Count() == 0 || CmpsBase.Count() == 0)
        {
            return;
        }
        Elements = VolsBase.Select(x => new VolConfirmeViewModel
            {
                Id = x.Id,
                Compagnie = CmpsBase.SingleOrDefault(c => c.Id == x.Compagnie).Name,
                DateFin = x.DateFin,
                JourDeVol = x.JourDeVol,
                VilleArrivee = x.VilleArrivee,
                VilleDepart = x.VilleDepart
            }).ToList();
    }

    public void AjouterVol()
    {
        NavigationManager.NavigateTo("AjouterVol");
    }

}

