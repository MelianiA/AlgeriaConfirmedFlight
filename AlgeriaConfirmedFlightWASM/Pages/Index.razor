@page "/"
@page "/index"
@using System.Globalization
@inject IVolConfirmeService volConfirmeService
@inject NavigationManager NavigationManager
@inject HttpClient client
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IVolConfirmeService volService


<PageTitle>Liste des vols</PageTitle>

<h1>Les vols confirmés vers l'Algérie</h1>
<b>Les données de cette page sont mets à jour régulièrement.</b>
<p>Le site est toujours en phase d'amélioration</p>
<p>Si vous souhaitez modifier ces informations, vous devez renseigner votre code secret <a class="bg-warning" 
        @onclick="@(() => NavigationManager.NavigateTo("secret"))" >ici</a></p>

@if (Elements == null)
{
    <Loader />
}
else
{
    <MudTable Elevation="25" Items="@Elements" Filter="new Func<VolConfirmeViewModel, bool>(Search)" @bind-customer="customer">
        <ToolBarContent>
            <MudButton @onclick="AjouterVol" Variant="Variant.Outlined">Ajouter</MudButton>
            <MudSpacer />
            <MudTextField Class="ml-4" @bind-Value="searchString" Placeholder="Chercher un vol ..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Compagnie</MudTh>
            <MudTh>Ville de départe</MudTh>
            <MudTh>Ville d'arrivée</MudTh>
            <MudTh>Jours de Vols</MudTh>
            <MudTh>Dernier jous de confirmation</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Compagnie">@context.Compagnie.Name</MudTd>
            <MudTd DataLabel="LastName">@context.VilleDepart</MudTd>
            <MudTd DataLabel="VilleArrivee">@context.VilleArrivee</MudTd>
            <MudTd DataLabel="JourDeVol">@context.JourDeVol</MudTd>
            <MudTd DataLabel="DateFin">@context.DateFin.Value.ToString("dd/MMMM/yyyy",new CultureInfo("fr-FR"))</MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(() => ModifierVol(@context.Id))" Color="Color.Success" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(() => SupprimerVol(@context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}



@code {
    private VolConfirmeViewModel customer = new VolConfirmeViewModel();
    private List<VolConfirmeViewModel> Elements = new List<VolConfirmeViewModel>();
    private string searchString = "";

    private bool Search(VolConfirmeViewModel customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (customer.Compagnie.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.DateFin.Value.ToString("dd/MMMM/yyyy", new CultureInfo("fr-FR")).Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.VilleArrivee.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.VilleDepart.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.JourDeVol.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        )
        {
            return true;
        }
        return false;
    }
    protected override async Task OnInitializedAsync()
    {
        var secret = await localStorage.GetItemAsync<string>("myelementCokkies");
        StaticsElements.CodeSecret = secret != null ? secret : "";
        try
        {
            StaticsElements.VolsBase = await volConfirmeService.GetAllVols();
            StaticsElements.CmpsBase = await volConfirmeService.GetAllCompagnies();
        }
        catch (Exception ex)
        {

        }

        if (StaticsElements.VolsBase.Count() == 0 || StaticsElements.CmpsBase.Count() == 0)
        {
            return;
        }
        Elements = StaticsElements.VolsBase.Select(x => new VolConfirmeViewModel
            {
                Id = x.Id,
                Compagnie = StaticsElements.CmpsBase.SingleOrDefault(c => c.Id == x.Compagnie),
                DateFin = x.DateFin,
                JourDeVol = x.JourDeVol,
                VilleArrivee = x.VilleArrivee,
                VilleDepart = x.VilleDepart
            }).ToList();
        //snackBar.Add("list Saved.", Severity.Error);
    }

    public void AjouterVol()
    {
        if (!StaticsElements.SecretValide())
        {
            snackBar.Add("Vous devez saisir le code secret afin de pouvoir effectuer cette opération", Severity.Error);
            return;
        }
        NavigationManager.NavigateTo("addorupdate");
    }

    public void ModifierVol(Guid id)
    {
        if (!StaticsElements.SecretValide())
        {
            snackBar.Add("Vous devez saisir le code secret afin de pouvoir effectuer cette opération", Severity.Error);
            return;
        }
        NavigationManager.NavigateTo($"addorupdate/{id}");

    }

    public async void SupprimerVol(Guid id)
    {
        if (!StaticsElements.SecretValide())
        {
            snackBar.Add("Vous devez saisir le code secret afin de pouvoir effectuer cette opération", Severity.Error);
            return;
        }


        try
        {
            var res = await volService.SupprimerVolConirme(id);
            Elements.Where(x => x.Id == id).ToList().ForEach(x => Elements.Remove(x));
            snackBar.Add("La suppression du vol est réussi", Severity.Success);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            snackBar.Add("Il y a eu un problème! veuillez recommencer svp", Severity.Warning);
        }

    }

}

